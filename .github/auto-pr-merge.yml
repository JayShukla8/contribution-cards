name: Auto-merge PRs

on:
  pull_request_target:
    types: [opened, synchronize]
    paths:
      - 'data/users.json' # <- only run if users.json file changed

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2

      - name: Check if PR only modifies data/users.json
        id: is_only_users_file_changed
        run: |
          PR_FILES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          FILES_CHANGED=$(echo $PR_FILES | tr '\n' ' ')

          echo "files_changed=$FILES_CHANGED" >> $GITHUB_ENV
          
          if [[ "${FILES_CHANGED// /}" == "data/users.json" ]]; then
            echo "only_users=true" >> $GITHUB_ENV
          else
            echo "only_users=false" >> $GITHUB_ENV
          fi

      - name: Check if PR has valid JSON format and changes
        run: |
          ADDITIONS=${{ github.event.pull_request.additions }}
          DELETIONS=${{ github.event.pull_request.deletions }}
          CHANGED_LINES=$(($ADDITIONS + $DELETIONS))
          
          echo "additions=$ADDITIONS" >> $GITHUB_ENV
          echo "deletions=$DELETIONS" >> $GITHUB_ENV
          echo "changed_lines=$CHANGED_LINES" >> $GITHUB_ENV

          if [[ $CHANGED_LINES -le 10 ]]; then
            echo "small_change=true" >> $GITHUB_ENV
          else
            echo "small_change=false" >> $GITHUB_ENV
          fi

      - name: Validate JSON format
        id: validate_json
        run: |
          cat data/users.json | jq empty

      - name: Merge PR
        id: merge_pr
        if: env.only_users == 'true' && env.small_change == 'true' && steps.validate_json.outcome == 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
             const response = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              merge_method: "squash"
             })

             if (response.status === 200) {
               const celebrationGifs = [
                 'https://c.tenor.com/ZCq4SwgCfxAAAAAC/snoopy-peanuts.gif',
                 'https://c.tenor.com/Z0ojZS2kpO0AAAAC/milk-and-mocha-happy.gif',
                 'https://c.tenor.com/LffD4a8ET9AAAAAC/heart-celebrate.gif',
                 'https://c.tenor.com/HJ0iSKwIG28AAAAC/yes-baby.gif',
                 'https://c.tenor.com/4blWuIh5MIYAAAAC/baby-yoda.gif',
                 'https://c.tenor.com/B_zYdea4l-4AAAAC/yay-minions.gif',
                 'https://media1.giphy.com/media/artj92V8o75VPL7AeQ/giphy.gif',
                 'https://media2.giphy.com/media/IwAZ6dvvvaTtdI8SD5/giphy.gif',
                 'https://media0.giphy.com/media/z8gtBVdZVrH20/giphy.gif',
                 'https://media2.giphy.com/media/26gN16cJ6gy4LzZSw/giphy.gif',
                 'https://media1.giphy.com/media/LZElUsjl1Bu6c/giphy.gif',
                 'https://media1.giphy.com/media/gHnwTttExPf4nwOWm7/giphy.gif',
               ]

               const getRandomGif = () => celebrationGifs[Math.floor(Math.random() * celebrationGifs.length)]

               const message = `Hello @${context.payload.pull_request.user.login}, congratulations! Your pull request has been merged. ðŸŽ‰\n\n![celebration gif](${getRandomGif()})`

               await github.rest.issues.createComment({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 issue_number: context.issue.number,
                 body: message
               })
              } else {
               await github.rest.issues.createComment({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 issue_number: context.issue.number,
                 body: "Something went wrong while attempting to merge this pull request. Please check the GitHub Actions log for more information."
               })
             }
            } catch (error) {
             let errMsg = "";
             if (error.status === 405 && error.response.data.message === "Pull Request is not mergeable") {
               errMsg = `Hello @${context.payload.pull_request.user.login}, thank you for your pull request. There is a merge conflict with the target branch. Please resolve the conflicts and push your changes.`;
             } else if (error.status === 409) {
               errMsg = "The pull request has conflicts with the target branch. Resolve the conflicts before merging.";
             } else {
               errMsg = "Something went wrong while attempting to merge your pull request. Please check the GitHub Actions log for more information.";
             }
             await github.rest.issues.createComment({
               owner: context.repo.owner,
               repo: context.repo.repo,
               issue_number: context.issue.number,
               body: errMsg
             })
             core.setFailed(error.message);
            }

      - name: Post comment on PR if not merged automatically
        if: env.only_users != 'true' || env.small_change != 'true' || steps.validate_json.outcome != 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
            })

            const botComment = comments.find(comment => comment.user.login === 'github-actions[bot]')

            const body = `Thank you for your pull request. This pull request contains changes in files which requires review. The following files were changed:\n\n${process.env.files_changed.trim() ? `\n\n${process.env.files_changed.trim().split(' ').map(file => `- ${file}`).join('\n')}` : ''}`

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              })
            }
